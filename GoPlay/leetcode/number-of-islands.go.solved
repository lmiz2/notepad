package main

// func main() {

// 	grid := [][]byte{
// 		{1, 1, 1, 1, 0},
// 		{1, 1, 0, 1, 0},
// 		{1, 1, 0, 0, 0},
// 		{0, 0, 0, 0, 0},
// 	}

// 	fmt.Println(numIslands(grid))
// }

type direction struct {
	i int
	j int
}

const land = 49
const water = 48

func getDirections() []direction {
	return []direction{{1, 0}, {0, 1}, {-1, 0}, {0, -1}}
}

func numIslands(grid [][]byte) int {
	visited := make([][]bool, len(grid))
	for i := range visited {
		visited[i] = make([]bool, len(grid[0]))
	}
	cnt := 0
	for i := range grid {
		for j := range grid[i] {
			if grid[i][j] == land && !visited[i][j] {
				dfs(grid, visited, i, j)
				cnt++
			}
		}
	}
	return cnt
}
func dfs(grid [][]byte, visited [][]bool, i, j int) {
	visited[i][j] = true
	for _, direction := range getDirections() {
		toi := i + direction.i
		toj := j + direction.j

		if toi >= 0 && toi < len(grid) && toj >= 0 && toj < len(grid[0]) && grid[toi][toj] == land && !visited[toi][toj] {
			dfs(grid, visited, toi, toj)
		}
	}
}
