
/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * type NestedInteger struct {
 * }
 *
 * // Return true if this NestedInteger holds a single integer, rather than a nested list.
 * func (this NestedInteger) IsInteger() bool {}
 *
 * // Return the single integer that this NestedInteger holds, if it holds a single integer
 * // The result is undefined if this NestedInteger holds a nested list
 * // So before calling this method, you should have a check
 * func (this NestedInteger) GetInteger() int {}
 *
 * // Set this NestedInteger to hold a single integer.
 * func (n *NestedInteger) SetInteger(value int) {}
 *
 * // Set this NestedInteger to hold a nested list and adds a nested integer to it.
 * func (this *NestedInteger) Add(elem NestedInteger) {}
 *
 * // Return the nested list that this NestedInteger holds, if it holds a nested list
 * // The list length is zero if this NestedInteger holds a single integer
 * // You can access NestedInteger's List element directly if you want to modify it
 * func (this NestedInteger) GetList() []*NestedInteger {}
 */
type NestedInteger struct {
}

func (this *NestedInteger) Add(elem NestedInteger)   {}
func (this NestedInteger) GetInteger() int           {}
func (n *NestedInteger) SetInteger(value int)        {}
func (this NestedInteger) IsInteger() bool           {}
func (this NestedInteger) GetList() []*NestedInteger {}

type NestedIterator struct {
	nestedList []*NestedInteger
	idx        int
	length     int
	tmp        *NestedInteger
	ans        []int
}

func Constructor(nestedList []*NestedInteger) *NestedIterator {
	obj := &NestedIterator{nestedList: nestedList, idx: 0, ans: []int{}, length: 0}
	dfs(nestedList, &obj.ans)
	obj.length = len(obj.ans)
	return obj
}
func dfs(nestedList []*NestedInteger, rs *[]int) {
	for _, v := range nestedList {
		if v.IsInteger() {
			*rs = append(*rs, v.GetInteger())
		} else {
			dfs(v.GetList(), rs)
		}
	}

}

func (this *NestedIterator) Next() int {
	rs := this.ans[this.idx]
	this.idx++
	return rs
}

func (this *NestedIterator) HasNext() bool {
	return this.length > this.idx
}
