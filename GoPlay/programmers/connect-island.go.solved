package main

import (
	"container/heap"
	"fmt"
)

// func main() {

// 	// arr := {}{}int{{0, 1, 1}, {0, 2, 2}, {1, 2, 5}, {1, 3, 1}, {2, 3, 8}}
// 	// fmt.Println(solution(4, arr))

// 	// arr := {}{}int{{0, 1, 1}, {0, 2, 2}, {1, 2, 5}, {1, 3, 1}, {2, 3, 8}, {1, 4, 6}, {2, 5, 1}, {3, 5, 2}}
// 	// fmt.Printf("\n answer : %d", solution(6, arr))

// 	arr := [][]int{{0, 1, 5}, {1, 2, 3}, {2, 3, 3}, {3, 1, 2}, {3, 0, 4}, {2, 4, 6}, {4, 0, 7}}
// 	fmt.Printf("\n answer : %d", solution(5, arr))
// }

type item struct {
	num    int
	toCost int
	// index  int
	// bitmask int
	// sum   int
	// stack string
}

type priorityQueue []*item

func (pq priorityQueue) Len() int { return len(pq) }
func (pq priorityQueue) Less(i, j int) bool {
	return pq[i].toCost < pq[j].toCost
}
func (pq priorityQueue) Swap(i, j int) {
	pq[i], pq[j] = pq[j], pq[i]
	// pq[i].index = i
	// pq[j].index = j
}
func (pq *priorityQueue) Push(x interface{}) {
	// n := len(*pq)
	item := x.(*item)
	// item.index = n
	*pq = append(*pq, item)
}
func (pq *priorityQueue) Pop() interface{} {
	old := *pq
	n := len(old)
	item := old[n-1]
	old[n-1] = nil
	// item.index = -1
	*pq = old[0 : n-1]
	return item
}

func solution(n int, costs [][]int) int {
	maxBit := (1 << n) - 1
	costMap := make([][]int, n)
	for i := range costMap {
		costMap[i] = make([]int, n)
	}
	for _, arr := range costs {
		costMap[arr[0]][arr[1]] = arr[2]
		costMap[arr[1]][arr[0]] = arr[2]
	}

	// pq := make(priorityQueue, 0)
	// heap.Init(&pq)
	// heap.Push(&pq, &item{0, 3})
	// heap.Push(&pq, &item{0, 1})
	// heap.Push(&pq, &item{0, 5})
	// heap.Push(&pq, &item{0, 2})
	// heap.Push(&pq, &item{0, 4})
	// heap.Push(&pq, &item{0, 0})

	// for pq.Len() > 0 {
	// 	fmt.Println(heap.Pop(&pq).(*item))
	// }

	pq := make(priorityQueue, 0)

	heap.Init(&pq)

	heap.Push(&pq, &item{num: 0, toCost: 0})
	bitmask := 1
	sum := 0
	counter := 0
	for pq.Len() > 0 {
		obj := heap.Pop(&pq).(*item)
		if obj.num == 0 || (1<<obj.num)&bitmask <= 0 {
			sum = sum + obj.toCost
			fmt.Printf("%d - ", obj.num)
			bitmask = bitmask | (1 << obj.num)
			for i := 0; i < n; i++ {
				if bitmask&(1<<i) <= 0 && bitmask < maxBit && costMap[obj.num][i] > 0 {
					heap.Push(&pq, &item{num: i, toCost: costMap[obj.num][i]})
					counter++
				} else if bitmask == maxBit {
					return sum
				}
			}
		}
	}

	return sum
}
