package main

import (
	"sort"
	"strconv"
)

// func main() {

// 	// arr := []int{0, 3, 30, 34, 5, 9, 1000, 100}
// 	// arr := []int{40, 403}
// 	arr := []int{0, 0, 0, 0, 0}

// 	fmt.Println(solution(arr))
// 	// arr := [][]int{{0, 1, 1}, {0, 2, 2}, {1, 2, 5}, {1, 3, 1}, {2, 3, 8}}
// 	// fmt.Println(solution(4, arr))

// 	// arr := {}{}int{{0, 1, 1}, {0, 2, 2}, {1, 2, 5}, {1, 3, 1}, {2, 3, 8}, {1, 4, 6}, {2, 5, 1}, {3, 5, 2}}
// 	// fmt.Printf("\n answer : %d", solution(6, arr))

// 	// arr := [][]int{{0, 1, 5}, {1, 2, 3}, {2, 3, 3}, {3, 1, 2}, {3, 0, 4}, {2, 4, 6}, {4, 0, 7}}
// 	// fmt.Printf("\n answer : %d", solution(5, arr))
}


type pair struct {
	num   int
	prior int
}

type pairs []pair

func (objs pairs) Less(i, j int) bool {
	return objs[i].prior > objs[j].prior
}

func (objs pairs) Len() int {
	return len(objs)
}

func (objs pairs) Swap(i, j int) {
	objs[i], objs[j] = objs[j], objs[i]
}

func solution(numbers []int) string {
	numPairs := pairs{}
	for _, v := range numbers {
		t := 0
		if v == 0 {
			t = -1
		} else if v < 1000 {
			tStr := strconv.Itoa(v)
			tBnd := tStr
			tLen := len(tStr)
			tIdx := 0

			for len(tStr) < 4 {
				tStr += string(tBnd[tIdx])
				tIdx = (tIdx + 1) % tLen
			}
			t, _ = strconv.Atoi(tStr)
		} else {
			t = 0
		}
		numPairs = append(numPairs, pair{v, t})
	}
	sort.Sort(numPairs)

	answer := ""
	tmp := ""
	for i := range numPairs {
		tmp += strconv.Itoa(numPairs[i].num)
	}

	isFirstZero := true
	for i := range tmp {
		if string(tmp[i]) == "0" && isFirstZero {
			continue
		} else {
			isFirstZero = false
			answer += string(tmp[i])
		}
	}
	if len(answer) == 0 {
		return "0"
	}
	return answer
}
